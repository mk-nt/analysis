#NEXUS

    [ File output by Morphobank v3.0 (http://www.morphobank.org); 2023-06-12 06.40.40 ]

    BEGIN TAXA;
    DIMENSIONS NTAX=44;
    TAXLABELS
    		'Paiwarria telemus'
		'Annamaria draudti'
		'Evenus regalis'
		'Brangas caranus'
		'Brangas getus'
		'Pseudolycaena marsyas'
		'Pseudolycaena damo'
		'Atlides halesus'
		'Atlides polybe'
		'Atlides cosa'
		'Arcas imperialis'
		'Arcas ducalis'
		'Arcas cypria'
		'Arcas delphia'
		'Arcas tuneta'
		'Arcas gozmanyi'
		'Arcas splendor'
		'Arcas jivaro'
		'Arcas alleluia'
		'Theritas mavors'
		'Theritas triquetra'
		'Theritas paupera'
		'Theritas harrietta'
		'Theritas drucei'
		'Lucilda margaritacea'
		'Lucilda danaus'
		'Lucilda dabrerus'
		'Lucilda boliboyerus'
		'Lucilda crines'
		'Denivia hemon'
		'Denivia phegeus'
		'Denivia augustula'
		'Denivia arene'
		'Denivia monica'
		'Denivia acontius'
		'Denivia chaluma'
		'Denivia deniva'
		'Denivia curitibaensis'
		'Denivia augustinula'
		'Denivia theocritus'
		'Denivia viresco'
		'Denivia espiritosanto'
		'Denivia silma'
		'Denivia lisus'
    ;
    ENDBLOCK;

    BEGIN CHARACTERS;
	DIMENSIONS NCHAR=77;
	FORMAT DATATYPE=STANDARD GAP=- MISSING=? SYMBOLS="012345678";
	CHARLABELS
		 [1] 'Male, frons, color'
		 [2] 'Male, paraocular area, color'
		 [3] 'Male, forewing, ventral surface, ground color'
		 [4] 'Male, hindwing, ventral surface, ground color'
		 [5] 'Male, forewing, outer margin'
		 [6] 'Male, forewing, costal margin'
		 [7] 'Male, forewing, apex of cell R2-M1'
		 [8] 'Forewing, dorsal surface, scent patch distal of the discal cell between veins M1 and M3, intermixed with regular iridescent wing scales'
		 [9] 'Forewing, dorsal surface, scent patch distal of the discal cell between veins M1 and M3, NOT intermixed with regular wing scales'
		 [10] 'Forewing, dorsal surface, scent pad'
		 [11] 'Male, forewing, ventral surface, red scaling between the costal margin and the Sc vein'
		 [12] 'Male, forewing, ventral surface, shape of red patch between the costal margin and vein Sc'
		 [13] 'Male and female, hindwing, ventral surface, red scaling between the costal margin and the Sc+R1 vein'
		 [14] 'Male and female, hindwing, ventral surface, shape of red scaling between the costal margin and vein Sc+R1'
		 [15] 'Male and female, hindwing, ventral surface, cell 3A-2A, red scaling'
		 [16] 'Male and female, hindwing, ventral surface, cell 3A-2A, shape of red scaling'
		 [17] 'Male and female, forewing ventral surface at the base, red scaling between vein Sc and the discal cell (character proposed by B치lint & Faynel, 2008)'
		 [18] 'Male and female, hindwing ventral surface at the base, red scaling between vein Sc+R1 and the discal cell (character proposed by B치lint & Faynel, 2008)'
		 [19] 'Male, forewing, ventral surface, base between discal cell and Cu2, bluish iridescent scales'
		 [20] 'Female, forewing, ventral surface, base between discal cell and Cu2, bluish iridescent scales'
		 [21] 'Male, forewing, ventral surface, submarginal band'
		 [22] 'Male, forewing, ventral surface, submarginal band, color'
		 [23] 'Female, forewing, ventral surface, submarginal band'
		 [24] 'Female, forewing, ventral surface, submarginal band, color'
		 [25] 'Male, forewing, ventral surface, postmedian band'
		 [26] 'Male, forewing, ventral surface, postmedian band, pattern'
		 [27] 'Male, forewing, ventral surface, postmedian band, elements'
		 [28] 'Male, forewing, ventral surface, postmedian band, color'
		 [29] 'Female, forewing, ventral surface, postmedian band'
		 [30] 'Female, forewing, ventral surface, submarginal region, whitish scales (modified character of Robbins et al., 2012)'
		 [31] 'Female, forewing, ventral surface, postmedian band, shape'
		 [32] 'Male, forewing, ventral surface, discal cell band'
		 [33] 'Male, forewing, ventral surface, discal cell band, color'
		 [34] 'Female, forewing, ventral surface, apex, scattered white scales'
		 [35] 'Male, forewing, origin of vein R2'
		 [36] 'Female, forewing and hindwing, dorsal surface, ground color'
		 [37] 'Male, hindwing, Cu2 vein, tail"s tip, white scales'
		 [38] 'Male, hindwing, ventral and dorsal surface, cell Cu1-Cu2 submarginal macule'
		 [39] 'Male, hindwing, ventral and dorsal surface, shape of submarginal macule in cell Cu1-Cu2'
		 [40] 'Male, hindwing, ventral surface, veins covered by black scales (modified character from B치lint et al., 2003)'
		 [41] 'Male, hindwing, ventral surface, inner margin, bluish or whitish line'
		 [42] 'Female, hindwing, ventral surface, central region, pink scaling (character proposed by Nicolay, 1971)'
		 [43] 'Male, hindwing, postmedian band'
		 [44] 'Male, hindwing, postmedian band, length'
		 [45] 'Male, hindwing, ventral surface, postmedian band, pattern'
		 [46] 'Male, hindwing, ventral surface, postmedian band, structure'
		 [47] 'Male and female, hindwing, ventral surface, postmedian displaced toward the base'
		 [48] 'Male, hindwing, ventral surface, postmedian band joining the submarginal band at Cu2 vein (character proposed by B치lint et al., 2007)'
		 [49] 'Male, hindwing, ventral surface, shape of postmedian band between inner margin and vein Cu1'
		 [50] 'Male, hindwing, ventral surface, postmedian band in cell Sc+R1-Rs'
		 [51] 'Male, hindwing, ventral surface, submarginal region, red band'
		 [52] 'Female, hindwing, ventral surface, submarginal region, red band'
		 [53] 'Male, hindwing, dorsal surface, central region of the inner margin, fold on the membrane'
		 [54] 'Male, hindwing, cell Cu2-2A, membrane invagination'
		 [55] 'Male, hindwing, cell Cu2-2A, basal extent of the membrane invagination, location'
		 [56] 'Male, hindwing, cell Cu2-2A, distal extent of the membrane invagination, location'
		 [57] 'Hindwing, androconia on the ventral surface of cell Cu2-2A'
		 [58] 'Male, hindwing, ventral surface, cell 2A-3A with a small pencil of hairs (character from Godman & Salvin 1887-1901)'
		 [59] 'Hindwing, outer margin split at intersection with vein 2A (character from Godman & Salvin 1887-1901)'
		 [60] 'Hindwing, anal region, size of split at vein 2A'
		 [61] 'Male, hindwing, shape of anal lobe structure'
		 [62] 'Male, hindwing, number of tails'
		 [63] 'Male, thorax, rounded white /bluish scaling'
		 [64] 'Male, thorax covered by white bristles'
		 [65] 'Male, abdomen, ventral surface, ground color'
		 [66] 'Valvae, posterior margin, lateral view'
		 [67] 'Valvae, ventral surface, slender projection arising from the central region and finishing beyond the posterior end'
		 [68] 'Saccus, length (cm)'
		 [69] 'Brush-organ'
		 [70] 'Vinculum, dorsal projection'
		 [71] 'Vinculum, dorsal projection, location'
		 [72] 'Vinculum, dorsal projection, location and shape'
		 [73] 'Fused vinculum/tegumen, ventral projection'
		 [74] 'Ductus bursae, shape'
		 [75] 'Ductus bursae, posterior region, membranous area'
		 [76] 'Ductus bursae, constriction'
		 [77] 'Ductus bursae, base lateral region, sclerotized process'
	;
	STATELABELS
		1
		'Emerald green'
		'Lemon green'
		'Muted green'
		'Yellowish green'
		'Turquoise'
		'Orange'
		'Brown'
		,
		2
		'Emerald green'
		'Lemon green'
		'Muted green'
		'Yellowish green'
		'White'
		'Blue'
		,
		3
		'Emerald green'
		'Lemon green'
		'Moss green'
		'Muted green'
		'Yellowish green'
		'Olive green'
		'Lilac'
		'Brown'
		,
		4
		'Emerald green'
		'Lemon green'
		'Moss green'
		'Muted green'
		'Olive green'
		'Yellowish green'
		'Lilac'
		'Brown'
		,
		5
		'Straight'
		'Concave'
		,
		6
		'Straight'
		'Convex'
		,
		7
		'Straight'
		'Acute'
		'Obtuse'
		,
		8
		'Absent'
		'Present'
		,
		9
		'Absent'
		'Present'
		,
		10
		'Absent'
		'Present'
		,
		11
		'Absent'
		'Present'
		,
		12
		'Short (as a spot in the base of the wing)'
		'Long (one third of the costal margin length)'
		,
		13
		'Absent'
		'Present'
		,
		14
		'Long (one third of the costal margin length)'
		'Short (as a spot in the base of the wing)'
		,
		15
		'Absent'
		'Present'
		,
		16
		'Long (one third of the cell length)'
		'Short (as a spot in the base of the wing)'
		,
		17
		'Absent'
		'Present'
		,
		18
		'Absent'
		'Present'
		,
		19
		'Absent'
		'Present'
		,
		20
		'Absent'
		'Present'
		,
		21
		'Absent'
		'Present'
		,
		22
		'Black'
		'Brown'
		'Blue'
		'Black macules with white outline'
		'Greenish'
		'White'
		,
		23
		'Absent'
		'Present'
		,
		24
		'Black'
		'Brown'
		'Black macules with white outline'
		'Greenish'
		,
		25
		'Absent'
		'Present'
		,
		26
		'Linear'
		'With the central portion (M1-Cu1) distally displaced'
		'Scattered macules'
		'With the terminal portion (M3-Cu2) distally displaced'
		,
		27
		'Uninterrupted thin line'
		'Rounded macules'
		'Dashed thin line'
		'Broken broad blur'
		,
		28
		'Black macules with white outline'
		'White macules with brown outline'
		'Brown'
		'Black'
		'Blue'
		'Green'
		'Black with greenish scales'
		,
		29
		'Absent'
		'Present'
		,
		30
		'Absent'
		'Present'
		,
		31
		'Linear'
		'Forming a V next to vein Cu2'
		'Scattered macules'
		'Fragments between the costal margin and vein Cu2 distally displaced'
		'Fragments between veins M3- Cu1 and Cu1- Cu2 distally displaced'
		'Fragments from the costal margin to vein M1 basally displaced'
		,
		32
		'Absent'
		'Present'
		,
		33
		'Black'
		'Brown'
		'Green'
		,
		34
		'Absent'
		'Present'
		,
		35
		'Discal cell apex'
		'Discal cell lateral'
		,
		36
		'Blue'
		'Brown'
		,
		37
		'Absent'
		'Present'
		,
		38
		'Absent'
		'Present'
		,
		39
		'Rounded'
		'Triangular'
		,
		40
		'None'
		'Veins Cu1, Cu2, and 2A'
		'All veins'
		,
		41
		'Absent'
		'Present'
		,
		42
		'Absent'
		'Present'
		,
		43
		'Absent'
		'Present'
		,
		44
		'Complete (from anal region reaching costal margin)'
		'Incomplete (not reaching costal margin)'
		,
		45
		'Dashed linear'
		'Aggregated macules (Brangas pattern)'
		'Scattered macules (Pseudolycaena pattern)'
		'Continuous linear'
		,
		46
		'Conspicuous'
		'Inconspicuous'
		,
		47
		'Absent'
		'Present'
		,
		48
		'Absent'
		'Present'
		,
		49
		'Forming a W'
		'Forming a V'
		'Curve'
		'Straight'
		'Reaching vein 3A'
		,
		50
		'Basally displaced'
		'Basally displaced to wing base'
		'Linear with the rest of the postmedian band'
		,
		51
		'Absent'
		'Present'
		,
		52
		'Absent'
		'Present'
		,
		53
		'Absent'
		'Present'
		,
		54
		'Absent'
		'Present'
		,
		55
		'Next to wing base'
		'At Cu1 origin'
		'Anterior to Cu1 origin'
		,
		56
		'Anterior to Cu1 origin'
		'At Cu1 origin'
		'Distal of the origin of M3'
		'At postmedian band region'
		'At submarginal band region'
		,
		57
		'Absent'
		'Present'
		,
		58
		'Absent'
		'Present'
		,
		59
		'Absent'
		'Present'
		,
		60
		'Not reaching submarginal region'
		'Reaching submarginal region'
		'Reaching postmedian region'
		,
		61
		'Rounded'
		'Triangular'
		,
		62
		'Three tails (M2-M3) (M3-Cu1) (Cu1-Cu2)'
		'Two tails (M3-Cu1) (Cu1-Cu2)'
		'Two tails (M3-Cu1) (Cu1-Cu2) and one stub (M2-M3)'
		'one tail (Cu1-Cu2)'
		'one tail (Cu1-Cu2) and one stub (M3-Cu1)'
		,
		63
		'Absent'
		'Present'
		,
		64
		'Absent'
		'Present'
		,
		65
		'Yellowish'
		'Brown'
		'Orange'
		'White'
		,
		66
		'Finger-like'
		'Rounded'
		'Triangular'
		,
		67
		'Absent'
		'Present'
		,
		68
		'Short (0.05 0.07)'
		'Medium (0.11-0.20)'
		'Long (0.30 - 0.40)'
		,
		69
		'Absent'
		'Present'
		,
		70
		'Absent'
		'Present'
		,
		71
		'Next to the base of brush-organs'
		'At the central region of brush organs'
		,
		72
		'Lies under brush organs'
		'Lies under and on the inner edge of brush organs'
		,
		73
		'Absent'
		'Present'
		,
		74
		'Straight'
		'In S shape'
		,
		75
		'Absent'
		'Present'
		,
		76
		'Present'
		'Absent'
		,
		77
		'Absent'
		'Present'
		
	;
	MATRIX
	'Paiwarria telemus'		              11110100010-0-0-000010100---00-0-01000-0001030010-0100--000--00000001100000-1
	'Annamaria draudti'		              33450100110-0-0-0010101010031000-01000-000103000121100--000--200000100--100-0
	'Evenus regalis'		                 33450100000-0-0-00000-0-10031000-01000-000103000021100--000--20000001100100-0
	'Brangas caranus'		                547700200011101011100-0-1111103{0,1}101000-010101--0210000--01100410000011111????
	'Brangas getus'		                  547700200011101011100-0-1111103{0,1}101000-010101--0210000--0110041000001111000-0
	'Pseudolycaena marsyas'		          64661110000-0-0-00101312121010210010010000102--021000{0,1}13{0,1}01101013201111?100-0
	'Pseudolycaena damo'		             64661110000-0-0-00101312121010210010010000102--021000{0,1}13{0,1}0110101320101--100-0
	'Atlides halesus'		                547700201110111100100-0-0---00-0-01010-1100----0--0000--0011041022011110100-1
	'Atlides polybe'		                 445401001110111100100-0-0---00-0-01010-2100----0--0000--0011041022011110100-0
	'Atlides cosa'		                   54770100111011110000111113321051101000-2{0,1}00----0--0000--0011041022011110100-0
	'Arcas imperialis'		               00000100110-0-0-00100-0-0---00-0-01000-0011130003-000100101211000102110011110
	'Arcas ducalis'		                  00000120110-0-0-00100-0-0---00-0-00000-0011130003-000100101211000102110011110
	'Arcas cypria'		                   00000120110-0-0-00100-0-0---00-0-01001100010300032000100101211000102110011110
	'Arcas delphia'		                  00000100010-0-0-00110-0-0---01-0-01000-000103000120000--001211000102110011110
	'Arcas tuneta'		                   00000100010-0-0-00110-0-0---01-0-010011000103000120000--001211000102110011110
	'Arcas gozmanyi'		                 00000100010-0-0-00000-100---00-0-01001100010300012000100001211000102110011110
	'Arcas splendor'		                 00000100010-0-0-001110100---00-0-01001100010300012000100101211000102110011110
	'Arcas jivaro'		                   00000100010-0-0-00110-0-0---00-0-01001100010300012000100101211000102110011110
	'Arcas alleluia'		                 00000100000-0-0-00000-100---00-0-01001100010300012000100101211000102110011110
	'Theritas mavors'		                22330100110-0-0-00000-111003100{0,1}000100-000103000100001001011010002011100100-0
	'Theritas triquetra'		             22330100110-0-0-00000-1110031001000100-000103000100001001011030002011100100-0
	'Theritas paupera'		               223301000{0,1}0-0-0-0000101110031011000100-00010300{0,1}000001001011010011011100100-0
	'Theritas harrietta'		             24330100110-0-0-000010111003101100?000-0001030010000010010110100110?1??01???0
	'Theritas drucei'		                22330100110-0-0-0010101110031001000100-000103001000001001011010011011100100-0
	'Lucilda margaritacea'		           25220100110-0-0-00100-0-0---1000-00000-0000----0--0010--00110400111100--000-0
	'Lucilda danaus'		                 25220100110-0-0-00100-0-0---1000-00000-0000----0--0010--00110400111100--000-0
	'Lucilda dabrerus'		               22770100110-0-0-000?12??1004?0?0-0?000-00010300042000????01104001??????????-?
	'Lucilda boliboyerus'		            22770100110-0-0-000?12??1004?0?0-01?00-000103000420000--00110300111100--0????
	'Lucilda crines'		                 22220120010-0-0-001015110---1000-01000-000103000220000--00110400020000--10110
	'Denivia hemon'		                  22220101000-0-0-0010101110261000-00100-00010001020000102101104000001111010101
	'Denivia phegeus'		                22330101000-0-0-0010101110261000-00000-00010001020000100101104000001111010101
	'Denivia augustula'		              22220101000-0-0-0010111110251000-10000-00010001020000100101104001001111010101
	'Denivia arene'		                  22220101000-0-0-0010111110251000-10000-00010001020000100101103001001111010101
	'Denivia monica'		                 22220121000-0-0-0010111110251000-10000-00010001020000102101103001001111010101
	'Denivia acontius'		               22220101000-0-0-0000111110261040-00000-00010001020000100101104000001111010101
	'Denivia chaluma'		                22220101000-0-0-0000111110261040-10000-00010001020000101101104001001111010101
	'Denivia deniva'		                 22770101000-0-0-0000111110021000-10000-0001031-02-000100101104001201111010101
	'Denivia curitibaensis'		          22770121000-0-0-00000-0-10021000-10000-0001031-02-0000--00110300120111101????
	'Denivia augustinula'		            22770120000-0-0-00000-0-10251041211000-00010001020000101101103001201111010101
	'Denivia theocritus'		             22770120000-0-0-0010141310251041211000-00010001020000100101103000201111010101
	'Denivia viresco'		                22220120000-0-0-0010111110261000-01000-00010001020000100001104000101111000101
	'Denivia espiritosanto'		          22220100000-0-0-00{0,1}0111110261000-11000-00010001020000101101101001101111000101
	'Denivia silma'		                  25220120000-0-0-0010111110261000-01000-00010001020000101101101000001111010101
	'Denivia lisus'		                  22220120000-0-0-0010111110261000-01000-00010001020000{0,1}00{0,1}0110100010{0,1}111010110
    ;
    ENDBLOCK;

          BEGIN NOTES;
      
      [Attribute comments]
            ENDBLOCK;
            BEGIN ASSUMPTIONS;
      TYPESET * UNTITLED = unord: 1 - 77;
      ENDBLOCK;
      BEGIN LABELS;
 TAXAGROUPLABEL Outgroup COLOR = (RGB 1 1 1) ; TAXAGROUPLABEL 'Ingroup_Pseudolycaena' COLOR = (RGB 1 1 1) ; TAXAGROUPLABEL 'Ingroup_Atlides' COLOR = (RGB 1 1 1) ; TAXAGROUPLABEL 'Ingroup_Arcas' COLOR = (RGB 1 1 1) ; TAXAGROUPLABEL 'Ingroup_Theritas' COLOR = (RGB 1 1 1) ; TAXAGROUPLABEL 'Ingroup_Lucilda' COLOR = (RGB 1 1 1) ; TAXAGROUPLABEL 'Ingroup_Denivia' COLOR = (RGB 1 1 1) ; CHARGROUPLABEL Head_character COLOR = (RGB 1 1 1) ; CHARGROUPLABEL Wing_character COLOR = (RGB 1 1 1) ; CHARGROUPLABEL Secondary_sexual_character COLOR = (RGB 1 1 1) ; CHARGROUPLABEL Thorax_character COLOR = (RGB 1 1 1) ; CHARGROUPLABEL Male_abdomen_character COLOR = (RGB 1 1 1) ; CHARGROUPLABEL Female_abdomen_character COLOR = (RGB 1 1 1) ; 
ENDBLOCK;
BEGIN MESQUITE;
 MESQUITESCRIPTVERSION 2; TITLE AUTO; tell ProjectCoordinator; timeSaved 1522002746369; getEmployee #mesquite.minimal.ManageTaxa.ManageTaxa; tell It; setID 0 6306286928944557086; tell It; setDefaultOrder 0 1 2 3 4 5 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 43 23 25 24 44 42 41 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40; attachments ; endTell; endTell; getEmployee #mesquite.charMatrices.ManageCharacters.ManageCharacters; tell It; setID 0 1821038509918699580; mqVersion 340; checksumv 0 3 2217574008 null getNumChars 77 numChars 77 getNumTaxa 44 numTaxa 44 short true bits 2305843009213694207 states 255 sumSquaresStatesOnly 424436.0 sumSquares -6.456360425798302E19 longCompressibleToShort false usingShortMatrix true NumFiles 1 NumMatrices 1; mqVersion; endTell; getWindow; tell It; suppress; setResourcesState false false 100; setPopoutState 300; setExplanationSize 0; setAnnotationSize 0; setFontIncAnnot 0; setFontIncExp 0; setSize 1265 696; setLocation 12 23; setFont SanSerif; setFontSize 10; getToolPalette; tell It; endTell; desuppress; endTell; getEmployee #mesquite.minimal.ManageTaxa.ManageTaxa; tell It; showTaxa #6306286928944557086 #mesquite.lists.TaxonList.TaxonList; tell It; setTaxa #6306286928944557086; getWindow; tell It; useTargetValue off; setTargetValue ; newAssistant #mesquite.lists.TaxonListCurrPartition.TaxonListCurrPartition; setExplanationSize 30; setAnnotationSize 20; setFontIncAnnot 0; setFontIncExp 0; setSize 1165 624; setLocation 12 23; setFont .SF_NS_Text; setFontSize 10; getToolPalette; tell It; endTell; endTell; showWindow; getEmployee #mesquite.lists.ColorTaxon.ColorTaxon; tell It; setColor Red; removeColor off; endTell; getEmployee #mesquite.lists.TaxonListAnnotPanel.TaxonListAnnotPanel; tell It; togglePanel off; endTell; endTell; endTell; getEmployee #mesquite.charMatrices.BasicDataWindowCoord.BasicDataWindowCoord; tell It; showDataWindow #1821038509918699580 #mesquite.charMatrices.BasicDataWindowMaker.BasicDataWindowMaker; tell It; getWindow; tell It; getTable; tell It; rowNamesWidth 133; endTell; setExplanationSize 30; setAnnotationSize 20; setFontIncAnnot 0; setFontIncExp 0; setSize 1165 624; setLocation 12 23; setFont SanSerif; setFontSize 10; getToolPalette; tell It; setTool mesquite.charMatrices.BasicDataWindowMaker.BasicDataWindow.arrow; endTell; setActive; setTool mesquite.charMatrices.BasicDataWindowMaker.BasicDataWindow.arrow; colorCells #mesquite.charMatrices.ColorCells.ColorCells; tell It; setColor Dark Gray; removeColor on; endTell; colorRowNames #mesquite.charMatrices.TaxonGroupColor.TaxonGroupColor; colorColumnNames #mesquite.charMatrices.CharGroupColor.CharGroupColor; colorText #mesquite.charMatrices.NoColor.NoColor; setBackground White; toggleShowNames off; toggleShowTaxonNames on; toggleTight off; toggleThinRows off; toggleShowChanges on; toggleSeparateLines off; toggleShowStates on; toggleAutoWCharNames on; toggleAutoTaxonNames off; toggleShowDefaultCharNames off; toggleConstrainCW on; toggleBirdsEye off; toggleShowPaleGrid off; toggleShowPaleCellColors off; toggleShowPaleExcluded off; togglePaleInapplicable on; toggleShowBoldCellText off; toggleAllowAutosize on; toggleColorsPanel on; toggleDiagonal on; setDiagonalHeight 80; toggleLinkedScrolling on; toggleScrollLinkedTables off; endTell; showWindow; getWindow; tell It; forceAutosize; endTell; getEmployee #mesquite.charMatrices.AlterData.AlterData; tell It; toggleBySubmenus off; endTell; getEmployee #mesquite.charMatrices.ColorByState.ColorByState; tell It; setStateLimit 9; toggleUniformMaximum on; endTell; getEmployee #mesquite.categ.StateNamesEditor.StateNamesEditor; tell It; makeWindow; tell It; setExplanationSize 30; setAnnotationSize 20; setFontIncAnnot 0; setFontIncExp 0; setSize 1165 624; setLocation 12 23; setFont SanSerif; setFontSize 10; getToolPalette; tell It; setTool mesquite.categ.StateNamesEditor.StateNamesWindow.ibeam; endTell; rowsAreCharacters on; toggleConstrainChar on; toggleConstrainCharNum 3; togglePanel off; toggleSummaryPanel off; endTell; showWindow; endTell; getEmployee #mesquite.categ.StateNamesStrip.StateNamesStrip; tell It; showStrip off; endTell; getEmployee #mesquite.charMatrices.AnnotPanel.AnnotPanel; tell It; togglePanel off; endTell; getEmployee #mesquite.charMatrices.CharReferenceStrip.CharReferenceStrip; tell It; showStrip off; endTell; getEmployee #mesquite.charMatrices.QuickKeySelector.QuickKeySelector; tell It; autotabOff; endTell; getEmployee #mesquite.charMatrices.SelSummaryStrip.SelSummaryStrip; tell It; showStrip off; endTell; getEmployee #mesquite.categ.SmallStateNamesEditor.SmallStateNamesEditor; tell It; panelOpen true; endTell; endTell; endTell; getEmployee #mesquite.charMatrices.ManageCharacters.ManageCharacters; tell It; showCharacters #1821038509918699580 #mesquite.lists.CharacterList.CharacterList; tell It; setData 0; getWindow; tell It; useTargetValue off; setTargetValue ; newAssistant #mesquite.lists.DefaultCharOrder.DefaultCharOrder; newAssistant #mesquite.lists.CharListInclusion.CharListInclusion; newAssistant #mesquite.lists.CharListPartition.CharListPartition; newAssistant #mesquite.parsimony.CharListParsModels.CharListParsModels; getTable; tell It; rowNamesWidth 755; endTell; setExplanationSize 30; setAnnotationSize 20; setFontIncAnnot 0; setFontIncExp 0; setSize 1165 624; setLocation 12 23; setFont SanSerif; setFontSize 10; getToolPalette; tell It; setTool mesquite.lists.CharacterList.CharacterListWindow.ibeam; endTell; endTell; showWindow; getEmployee #mesquite.lists.CharListAnnotPanel.CharListAnnotPanel; tell It; togglePanel off; endTell; endTell; endTell; endTell; 
ENDBLOCK;
BEGIN MESQUITECHARMODELS;
 ProbModelSet * UNTITLED = 'Mk1 (est.)': 1 - 77; 
ENDBLOCK;
BEGIN SETS;
 TAXPARTITION * UNTITLED = Outgroup : 1 - 5, 'Ingroup_Pseudolycaena' : 6 - 7, 'Ingroup_Atlides' : 8 - 10, 'Ingroup_Arcas' : 11 - 19, 'Ingroup_Theritas' : 20 - 24 30, 'Ingroup_Denivia' : 25 - 29 31 - 44; CHARPARTITION * UNTITLED = Head_character : 1 - 2, Wing_character : 3 - 7 11 - 53 59 - 62, Secondary_sexual_character : 8 - 10 54 - 58 69, Thorax_character : 63 - 64, Male_abdomen_character : 65 - 68 70 - 73, Female_abdomen_character : 74 - 77; 
ENDBLOCK;
BEGIN TREES;
 Title 'Trees from Mesquite''s heuristic search'; ID 015fc13649b21; LINK Taxa = Taxa; TRANSLATE [0] 1 Paiwarria_telemus, [1] 2 Annamaria_draudti, [2] 3 Evenus_regalis, [3] 4 Brangas_caranus, [4] 5 Brangas_getus, [5] 6 Pseudolycaena_marsyas, [6] 7 Pseudolycaena_damo, [7] 8 Atlides_halesus, [8] 9 Atlides_polybe, [9] 10 Atlides_cosa, [10] 11 Arcas_imperialis, [11] 12 Arcas_ducalis, [12] 13 Arcas_cypria, [13] 14 Arcas_delphia, [14] 15 Arcas_tuneta, [15] 16 Arcas_gozmanyi, [16] 17 Arcas_splendor, [17] 18 Arcas_jivaro, [18] 19 Arcas_alleluia, [19] 20 Theritas_mavors, [20] 21 Theritas_triquetra, [21] 22 Theritas_paupera, [22] 23 Theritas_harrietta, [23] 24 Theritas_drucei, [24] 25 Lucilda_margaritacea, [25] 26 Lucilda_danaus, [26] 27 Lucilda_dabrerus, [27] 28 Lucilda_boliboyerus, [28] 29 Lucilda_crines, [29] 30 Denivia_hemon, [30] 31 Denivia_phegeus, [31] 32 Denivia_augustula, [32] 33 Denivia_arene, [33] 34 Denivia_monica, [34] 35 Denivia_acontius, [35] 36 Denivia_chaluma, [36] 37 Denivia_deniva, [37] 38 Denivia_curitibaensis, [38] 39 Denivia_augustinula, [39] 40 Denivia_theocritus, [40] 41 Denivia_viresco, [41] 42 Denivia_espiritosanto, [42] 43 Denivia_silma, [43] 44 Denivia_lisus; TREE 'Tree 1 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 2 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 3 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),((13,(22,4)),(7,(12,(21,3))))); TREE 'Tree 4 from search (criterion: maximimize Tree value using character)+' = ((5,(((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),(13,(22,4)))),(7,(12,(21,3)))); TREE 'Tree 5 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),((14,(24,6)),5)),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 6 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 7 from search (criterion: maximimize Tree value using character)+' = ((((((26,8),((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 8 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 9 from search (criterion: maximimize Tree value using character)+' = (((((9,((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),(26,8))),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 10 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),(9,(26,8))),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 11 from search (criterion: maximimize Tree value using character)+' = ((((((10,(((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),9)),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 12 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),(10,9)),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 13 from search (criterion: maximimize Tree value using character)+' = ((((((((25,11),((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),10)),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 14 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),((25,11),10)),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 15 from search (criterion: maximimize Tree value using character)+' = (((((((((30,15),(((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(25,11))),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 16 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),((30,15),(25,11))),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 17 from search (criterion: maximimize Tree value using character)+' = ((((((((((31,16),((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(30,15))),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 18 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),((31,16),(30,15))),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 19 from search (criterion: maximimize Tree value using character)+' = (((((((((((32,17),(((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(31,16))),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 20 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),((32,17),(31,16))),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 21 from search (criterion: maximimize Tree value using character)+' = (((((((((((18,((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),(32,17))),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 22 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),(18,(32,17))),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 23 from search (criterion: maximimize Tree value using character)+' = ((((((((((((19,(((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),18)),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 24 from search (criterion: maximimize Tree value using character)+' = (((((((((((((20,((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),19)),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 25 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),(20,19)),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 26 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((33,(((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),20)),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 27 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),(33,20)),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 28 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((34,((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),33)),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 29 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),(34,33)),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 30 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((35,(((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),34)),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 31 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),(35,34)),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 32 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((36,((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),35)),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 33 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),(36,35)),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 34 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((37,(((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),36)),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 35 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),(37,36)),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 36 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((38,((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),37)),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 37 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),(38,37)),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 38 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((39,(((((((((((1,2),27),23),28),29),44),43),42),41),40),38)),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 39 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),(39,38)),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 40 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((40,((((((((((1,2),27),23),28),29),44),43),42),41),39)),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 41 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),(40,39)),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 42 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((41,(((((((((1,2),27),23),28),29),44),43),42),40)),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 43 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),(41,40)),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 44 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((42,((((((((1,2),27),23),28),29),44),43),41)),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 45 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),(42,41)),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 46 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((43,(((((((1,2),27),23),28),29),44),42)),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 47 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),44),(43,42)),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 48 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((44,((((((1,2),27),23),28),29),43)),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 49 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),29),(44,43)),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 50 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((29,(((((1,2),27),23),28),44)),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 51 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),28),(29,44)),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 52 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((28,((((1,2),27),23),29)),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 53 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),23),(28,29)),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 54 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((23,(((1,2),27),28)),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 55 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),27),(23,28)),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 56 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((27,((1,2),23)),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 57 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,2),(27,23)),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 58 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((2,(1,27)),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 59 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((1,(2,27)),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 60 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),32),17),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 61 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),31),16),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 62 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),30),15),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 63 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),25),11),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 64 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),26),8),(14,(24,6))),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 65 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),14),(24,6)),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 66 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),((14,24),6)),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 67 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),((14,6),24)),5),(13,(22,4))),(7,(12,(21,3)))); TREE 'Tree 68 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),13),(22,4)),(7,(12,(21,3)))); TREE 'Tree 69 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),((13,22),4)),(7,(12,(21,3)))); TREE 'Tree 70 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),((13,4),22)),(7,(12,(21,3)))); TREE 'Tree 71 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),7),(12,(21,3))); TREE 'Tree 72 from search (criterion: maximimize Tree value using character)+' = ((((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(12,(21,3))),7); TREE 'Tree 73 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),((7,12),(21,3))); TREE 'Tree 74 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),((7,(21,3)),12)); TREE 'Tree 75 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,((12,21),3))); TREE 'Tree 76 from search (criterion: maximimize Tree value using character)+' = (((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(13,(22,4))),(7,((12,3),21))); TREE 'Tree 77 from search (criterion: maximimize Tree value using character)+' = ((22,4),(13,((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3)))))); TREE 'Tree 78 from search (criterion: maximimize Tree value using character)+' = (13,((22,4),((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3)))))); TREE 'Tree 79 from search (criterion: maximimize Tree value using character)+' = (((13,22),4),((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 80 from search (criterion: maximimize Tree value using character)+' = (((13,4),22),((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 81 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),(5,(7,(12,(21,3)))))); TREE 'Tree 82 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),((14,(24,6)),5)),(7,(12,(21,3))))); TREE 'Tree 83 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 84 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((26,8),((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 85 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),((((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 86 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),((((9,((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),(26,8))),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 87 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),10),(9,(26,8))),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 88 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((10,(((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),9)),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 89 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),(25,11)),(10,9)),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 90 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((25,11),((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),10)),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 91 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(30,15)),((25,11),10)),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 92 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),((((((((30,15),(((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),(25,11))),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 93 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(31,16)),((30,15),(25,11))),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 94 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((((31,16),((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),(30,15))),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 95 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(32,17)),((31,16),(30,15))),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 96 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),((((((((((32,17),(((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),(31,16))),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 97 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),18),((32,17),(31,16))),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 98 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),((((((((((18,((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),(32,17))),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 99 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((((((((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),19),(18,(32,17))),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); TREE 'Tree 100 from search (criterion: maximimize Tree value using character)+' = ((13,(22,4)),(((((((((((19,(((((((((((((((((((1,2),27),23),28),29),44),43),42),41),40),39),38),37),36),35),34),33),20),18)),(32,17)),(31,16)),(30,15)),(25,11)),10),9),(26,8)),(14,(24,6))),5),(7,(12,(21,3))))); 
ENDBLOCK;
