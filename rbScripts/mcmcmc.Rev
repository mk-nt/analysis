print("Timestamp:", time("year"), time("day"), time("seconds"))
seed(0)

neo <- readDiscreteCharacterData("project%PID%.neo.nex")
trans <- readDiscreteCharacterData("project%PID%.trans.nex")
logFile = "%PID%_%SCRIPT%.log"
paramFile = "%PID%_%SCRIPT%.p.log"
treeFile = "%PID%_%SCRIPT%.trees"
ckpFile = "%PID%_%SCRIPT%.ckp"
source("%SCRIPT%.Rev")

monitors.append( mnModel(filename = logFile, printgen = 36) )
monitors.append( mnModel(filename = paramFile, printgen = 6, stochasticOnly = TRUE, exclude = ["rel_br_lengths"]) )
monitors.append( mnFile(filename = treeFile, printgen = 12, phylogeny) )

mymc3 = mcmcmc(
  mymodel, monitors, moves,
  nruns = 2,
  nchains = 8,
  tuneHeat = TRUE,
  swapMethod = "both",
  swapMode = "multiple",
  combine = "none"
)
print("  - Created MCMCMC object")

checkFreq = 100

if (fileExists("%PID%_%SCRIPT%_run_1_chain_0.ckp")) {
  print("  - Initializing from checkpoint")
  # Note that in RevBayes 1.2.5, restoring from checkpoint can sometimes cause
  # a segmentation fault.  For affected matrices, there is no alternative but
  # to start the run anew with a longer run time (see stopping_rules below).
  mymc3.initializeFromCheckpoint(ckpFile)
} else {
  mymc3.burnin(generations = 3000, tuningInterval = checkFreq * 3)
}

stopping_rules[1] = srMaxTime(71, "hours")
# Overshoot ESS slightly as calculations may differ
stopping_rules[2] = srMinESS(333, paramFile, checkFreq)
# PSRF requires RevBayes 1.2.5
stopping_rules[3] = srGelmanRubin(1.01, paramFile, checkFreq)

print("  - Commencing MCMCMC run at", time("year"), time("day"), time("seconds")))
mymc3.run(rules = stopping_rules, checkpointFile = ckpFile, checkpointInterval = checkFreq)

print("  # # # RUN COMPLETE # # #  ")
print("Timestamp:", time("year"), time("day"), time("seconds"))
q()
